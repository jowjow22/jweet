generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt 
 
  @@map("users")
  Like Like[]
  Post Post[]
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Like {
  id          String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  userId     String
  postId     String
  createdAt DateTime @default(now())
}

model Post {
  id          String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  likes       Like[]
  childPostId String? @unique
  childPost   Post?    @relation("ChildPost", fields: [childPostId], references: [id])
  parentPost  Post?    @relation("ChildPost")
  content   String
  hasChildPost Boolean
  isRepost   Boolean
  userId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}